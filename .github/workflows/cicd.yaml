name: CI/CD

# 워크플로우 트리거 설정
on:
  push:
    branches: [ main ]    # main 브랜치에 push될 때 실행
  pull_request:
    branches: [ main ]    # main 브랜치로 PR이 생성될 때 실행

jobs:
  # 테스트 Job
  test:
    runs-on: ubuntu-latest
    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v3

      # Gradle 설정 및 캐시 활성화
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}  # PR일 때는 캐시 읽기 전용

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트 실행 (병렬 처리로 속도 향상)
      - name: Run tests
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew test --parallel --info

  # 배포 Job (main 브랜치 push일 때만 실행)
  deploy:
    needs: test    # test job이 성공해야 실행
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # 소스 코드 체크아웃 (ubuntu 서버로 깃허브에 저장된 코드를 복사하는 작업 정도로 이해)
      - uses: actions/checkout@v3

      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ECR 레포지토리 생성 (없는 경우)
      - name: Create ECR repositories
        run: |
          aws ecr describe-repositories --repository-names spring-app || \
          aws ecr create-repository --repository-name spring-app
          aws ecr describe-repositories --repository-names nginx || \
          aws ecr create-repository --repository-name nginx

      # Docker 빌드 캐시 설정 (빌드 속도 향상)
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Docker Buildx 설정 (효율적인 Docker 빌드)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Gradle 빌드 수행
      - name: Build with Gradle
        run: ./gradlew build -x test --parallel --build-cache

      # Spring 애플리케이션 Docker 이미지 빌드 및 푸시
      - name: Build and push Spring app image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          SPRING_APP_REPOSITORY: spring-app
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.SPRING_APP_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.SPRING_APP_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Nginx Docker 이미지 빌드 및 푸시
      - name: Build and push Nginx image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          NGINX_REPOSITORY: nginx
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.NGINX_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.NGINX_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Docker 빌드 캐시 정리
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # EC2 배포 디렉토리 준비
      - name: Prepare EC2 and copy files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/spring-app

      # docker-compose 파일 EC2로 복사
      - name: Copy docker-compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yaml"
          target: "~/spring-app"

      # EC2에 배포 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 디렉토리로 이동
            cd ~/spring-app
            
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 환경변수 파일 생성
            cat > .env << EOF
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY=spring-app
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_EC2_INSTANCE_ID=${{ secrets.AWS_EC2_INSTANCE_ID }}
            JWT_ISSUER=${{ secrets.JWT_ISSUER }}
            JWT_SECRET=${{ secrets.JWT_SECRET_KEY }}
            EOF
            
            # 컨테이너 재시작
            docker compose down
            docker compose pull
            docker compose up -d
            
            # 사용하지 않는 이미지, 컨테이너, 볼륨 정리
            docker system prune -af --volumes